/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as Import } from './routes/*'
import { Route as IndexImport } from './routes/index'
import { Route as AppStartRouteImport } from './routes/_app/start/route'

// Create Virtual Routes

const LogoutLazyImport = createFileRoute('/logout')()

// Create/Update Routes

const LogoutLazyRoute = LogoutLazyImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_app.lazy').then((d) => d.Route))

const Route = Import.update({
  id: '/*',
  path: '/*',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppStartRouteRoute = AppStartRouteImport.update({
  id: '/start',
  path: '/start',
  getParentRoute: () => AppRoute,
} as any).lazy(() =>
  import('./routes/_app/start/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/*': {
      id: '/*'
      path: '/*'
      fullPath: '/*'
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_app/start': {
      id: '/_app/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof AppStartRouteImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppStartRouteRoute: typeof AppStartRouteRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppStartRouteRoute: AppStartRouteRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/*': typeof Route
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutLazyRoute
  '/start': typeof AppStartRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/*': typeof Route
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutLazyRoute
  '/start': typeof AppStartRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/*': typeof Route
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutLazyRoute
  '/_app/start': typeof AppStartRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/*' | '' | '/login' | '/logout' | '/start'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/*' | '' | '/login' | '/logout' | '/start'
  id: '__root__' | '/' | '/*' | '/_app' | '/login' | '/logout' | '/_app/start'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Route: typeof Route
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutLazyRoute: typeof LogoutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Route: Route,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutLazyRoute: LogoutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/*",
        "/_app",
        "/login",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/*": {
      "filePath": "*.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/start"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.lazy.tsx"
    },
    "/_app/start": {
      "filePath": "_app/start/route.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
